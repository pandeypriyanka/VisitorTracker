continue
next
rooms[room_no]
next
lines_to_process
continue
[{"11"=>29}, {"12"=>18}].map(&:values).flatten.reduce(:+)
[{"11"=>29}, {"12"=>18}].map(&:values).flatten
[{"11"=>29}, {"12"=>18}].map(&:values)
[{"11"=>29}, {"12"=>18}].map(&:values).reduce(:+)
[{"11"=>29}, {"12"=>18}].map(&:keys).reduce(:+)
[{"11"=>29}, {"12"=>18}].map(&:).reduce(:+)
pp = rooms[0].each_with_index{|s, i| puts i }}
pp = rooms[0].sum {|h| h }
pp = rooms[0]
pp = rooms[0].each_with_index{|s, i| puts s.values{|sum,x| sum + x }}
pp
pp = rooms[0].each_with_index{|s, i| s.values.flatten}
pp = rooms[0].each_with_index{|s, i| puts s.values.flatten}
pp = rooms[0].each_with_index{|s, i| puts s.values}
pp = rooms[0].each_with_index{|s, i| puts s.class}
pp = rooms[0].each_with_index{|s, i| s.class}
pp
pp = rooms[0].each_with_index{|s, i| s}
pp
pp = rooms[0].each_with_index{|s, i| s.values}
pp = rooms[0].each_with_index{|s, i| puts s.values.class}
pp = rooms[0].each_with_index{|s, i| puts s.values.sum}
pp = rooms[0].each_with_index{|s, i| puts s.values}
rooms[0].each_with_index{|s, i| puts s.values}
rooms[0].each_with_index{|s, i| puts s}
rooms[0].size
rooms[0].each_with_index{|s, i| puts s.size}
rooms[0].each_with_index{|s, i| puts s}
rooms
rooms[0].each_with_index{|s, i| puts s.keys}
rooms[0].each_with_index{|s, i| puts s}
rooms[0].each_with_index{|s, i| puts i}
rooms[0].each_with_index{|s, i| puts s[i]}
rooms[0].each_with_index{|s, i| puts s}
rooms[0].each_with_index{}
rooms[0].collect{|s| puts s.class}
rooms[0].collect{|s| puts s[0]}
rooms[0].collect{|s| puts s}
rooms[0].size
rooms[0]
rooms.class
rooms.keys
rooms.each_with_index{|v,i| puts v}
rooms.each_with_index{|v,i| puts v.present?}
rooms.each_with_index{|v,i| puts v}
rooms
continue
    rooms.each_with_index { |v, i|
continue
  printf("Room %d, %d minute average visit, %d visitor(s) total.\n", i, v[1]/v[2], v[0].size())
  next if v[0].nil? # noone entered the room
}    rooms.each_with_index { |v, i|
  printf("Room %d, %d minute average visit, %d visitor(s) total.\n", i, v[1]/v[2], v[0].size())
  next if v[0].nil? # noone entered the room
    rooms.each_with_index { |v, i|
rooms
continue
rooms
continue
rooms
continue
rooms
continue
new_time = time - last_visit_data["#{visitor_no}"][:time]
last_visit_data["#{visitor_no}"][:time] = time - last_visit_data["#{visitor_no}"][:time]
last_visit_data = last_visit_data.first
last_visit_data
last_visit_data["#{visitor_no}"][:time] = time - last_visit_data["#{visitor_no}"][:time]
last_visit_data.first["#{visitor_no}"][:time] = time - last_visit_data.first["#{visitor_no}"][:time]
last_visit_data.first["#{visitor_no}"][:time]
last_visit_data.first["#{visitor_no}"]
last_visit_data.first
last_visit_data
rooms[room_no].collect{|s| s.keys}
room_no
rooms[room_no].collect{|s| s.keys}.flatten.include?("#{visitor_no}")
visited_list
rooms
continue
rooms
continue
rooms
continue
rooms[room_no]
visitor_no, room_no, inout, time = line.split.map{|s| /^[0-9]+$/.match(s) ? s.to_i : s}
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
continue
next
rooms[room_no]
continue
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no]
next
rooms[room_no] << {"#{visitor_no}" => {time: time}}
next
last_visit_data = rooms[room_no].select{|s| s["#{visitor_no}"]}
visited_list = rooms[room_no].collect{|s| s.keys}.flatten.include?("#{visitor_no}")
rooms[room_no]
continue
rooms
last_visit_data = rooms.select{|s| s["#{visitor_no}"]}
visited_list = rooms.collect{|s| s.keys}.flatten.include?("#{visitor_no}")
continue
next
continue
 rooms.collect{|s| s.keys}.flatten.include?("#{visitor_no}")
 rooms[room_no]
continue
rooms[room_no].collect{|s| s.keys}.flatten.include?("#{visitor_no}")
continue
rooms
next
rooms[visitor_no][room_no].nil?
next
rooms[visitor_no]
rooms[visitor_no][room_no].nil?
room_no
visitor_no
next
rooms
next
rooms
continue
rooms
continue
rooms
continue
continu
line
room_no, visitor_no, inout, time
next
room_no
room_no, visitor_no, inout, time
lroom_no, visitor_no, inout, time
continue
rooms = Array.new(100){ Array.new(3) }
room_no, visitor_no, inout, time = line.split.map{|s| /^[0-9]+$/.match(s) ? s.to_i : s}
line
line.to_i
next
line
line.to_i
next
line.to_i
line
continue
File.foreach( params[:uploaded_data].path ).with_index{|line, index|  puts line}
File.foreach( params[:uploaded_data] ).with_index{|line, index|  puts line}
params[:uploaded_data]
params
continue
